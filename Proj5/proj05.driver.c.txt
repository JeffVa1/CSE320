#include "/user/cse320/Projects/project05.support.h"
#include <stdio.h>
//	Jeffrey Valentic
//	10/7/2020
//	CSE 320 Project 5
//	Driver -> TESTING
int main()
{

    //INVALID TESTS
    char test_0[] = "qwerty";
    int base_0 = 2;
    int result_0 = 0;
    int FINAL0 = convert(&test_0[0], base_0, &result_0);
    if (FINAL0 == 0)
    {
        printf("RETURNED %d, EXPECTED: 0\n\n", FINAL0);
    }

    //VALID TEST
    char test_1[] = " \n   1111";
    int base_1 = 2;
    int result_1 = 0;
    int FINAL1 = convert(&test_1[0], base_1, &result_1);
    if (FINAL1 == 1)
    {
        printf("RETURNED: %d, EXPECTED: 1\n", FINAL1);
        printf("Expected Output: 15\n");
        printf("Output: %d\n", result_1);
    }

    //(+/-) BASE 16 TEST
    char test_2[] = "  +bbbb";
    int base_2 = 16;
    int result_2 = 0;
    int FINAL2 = convert(&test_2[0], base_2, &result_2);
    if (FINAL2 == 1)
    {
        printf("RETURNED: %d, EXPECTED: 1\n", FINAL2);
        printf("Expected Output: 48059\n");
        printf("OUTPUT: %d\n", result_2);
    }

    //(+/-) BASE 32 TEST
    char test_3[] = "-cccc";
    int base_3 = 32;
    int result_3 = 0;
    int FINAL3 = convert(&test_3[0], base_3, &result_3);
    if (FINAL3 == 1)
    {
        printf("RETURNED: %d, EXPECTED: 1\n", FINAL3);
        printf("Expected Output: -405900\n");
        printf("OUTPUT: %d\n", result_3);
    }

    //CHARACTER TEST
    char test_4[] = "ABCabc";
    int base_4 = 30;
    int result_4 = 0;
    int FINAL4 = convert(&test_4[0], base_4, &result_4);
    if (FINAL4 == 1)
    {
        printf("RETURNED: %d, EXPECTED: 1\n", FINAL4);
        printf("Expected Output: 252243342\n");
        printf("OUTPUT: %d\n", result_4);
    }

    //TRICK INVALID CHARACTERS TESTS
    char test_5[] = "DEF0~@~";
    int base_5 = 17;
    int result_5 = 0;
    int FINAL5 = convert(&test_5[0], base_5, &result_5);
    if (FINAL5 == 1)
    {
        printf("RETURNED: %d, EXPECTED: 1\n", FINAL5);
        printf("Expected Output: 68170\n");
        printf("OUTPUT: %d\n", result_5);
    }

    //INVALID CHAR TETSTS
    char test_6[] = "&^*@#$";
    int base_6 = 17;
    int result_6 = 0;
    int FINAL6 = convert(&test_6[0], base_6, &result_6);
    if (FINAL6 == 1)
    { 
        printf("RETURNED: %d, EXPECTED: 0\n\n", FINAL6);
    }

    //INVALID BASE TESTS
    char test_7[] = "101010";
    int base_7 = 500;
    int result_7 = 0;
    int FINAL7 = convert(&test_7[0], base_7, &result_7);
    if (FINAL7 == 1)
    {
        printf("RETURNED %d, EXPECTED: 0\n\n", FINAL7);
    }

    //BINARY NEGATIVE TEST
    char test_8[] = "-0110";
    int base_8 = 2;
    int result_8 = 0;
    int FINAL8 = convert(&test_8[0], base_8, &result_8);
    if (FINAL8 == 1)
    {
        printf("RETURNED: %d, EXPECTED: 1\n", FINAL8);
        printf("EXPECTED OUTPUT: -6\n");
        printf("OUTPUT: %d\n", result_8);
    }

    //BASE 8 SYMBOL TESTS
    char test_9[] = "71717~@~";
    int base_9 = 8;
    int result_9 = 0;
    int FINAL9 = convert(&test_9[0], base_9, &result_9);
    if (FINAL9 == 1)
    {
        printf("RETURNED: %d, EXPECTED: 1\n", FINAL9);
        printf("EXPECTED OUTPUT: 29647\n");
        printf("OUTPUT: %d\n", result_9);
    }
}